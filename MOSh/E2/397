#include "bits/stdc++.h"
#define ff first
#define ss second
#define puba push_back
#define mapa make_pair
#define szof(_x) (int) (_x).size()
#define bend(_x) (_x).end(), (_x).begin()

using namespace std;
typedef long long LL;
typedef pair <int, int> pii;
const int MAXN = 3e5 + 5;

int n;
vector <pii > graph[MAXN];
vector <int> can[MAXN];
int inp[MAXN];
bool used[MAXN];
vector <int> now;
int ans = 0;

int dfs(int v, int rest) {
    now.puba(v);
    used[v] = true;
    for (int i = 0; i < szof(graph[v]); ++i) {
        if (!used[graph[v][i].ff] && rest >= graph[v][i].ss) {
            dfs(graph[v][i].ff, graph[v][i].ss);
        }
    }
    return 0;
}

int dfs2(int v) {
    used[v] = true;
    for (int i = 0; i < szof(can[v]); ++i) {
        if (!used[can[v][i]]) {
            dfs2(can[v][i]);
            return 0;
        }
    }
    ++ans;
    return 0;
}

int main() {
    freopen("alarm.in", "r", stdin);
    freopen("alarm.out", "w", stdout);

    //cin >> n;
    scanf("%d", &n);

    for (int i = 0; i < n; ++i) {
        //cin >> inp[i];
        scanf("%d", &inp[i]);
        //vers.push(mapa(inp[i], i));
    }

    for (int i = 0; i < n - 1; ++i) {
        int a, b, l;
        scanf("%d%d%d", &a, &b, &l);
        --a;--b;
        graph[a].puba(mapa(b, l));
        graph[b].puba(mapa(a, l));
    }

    //int ans = 0;

    for (int i = 0; i < n; ++i) {
        memset(used, 0, sizeof used);
        now.clear();
        dfs(i, inp[i]);
        for (int j = 0; j < szof(now); ++j) {
            can[now[j]].puba(i);
        }
    }
    memset(used, 0, sizeof used);

    for (int i = 0; i < n; ++i) {
        if (!used[i]) {
            dfs2(i);
        }   
    }

    cout << ans << endl;
                       
    return 0;
}

#include <fstream>
#include <vector>
#include <algorithm>

#define MAXN (int)3e5

using namespace std;

vector<vector<int>> arr;
vector<vector<int>> krs;
bool used[MAXN];
bool TAKE;


void Dfs(int v, int b, int i)
{
	used[v] = true;
	if (v == b)
	{
		TAKE = true;
		krs[i].push_back(v);
		return;
	}
	for (auto e : arr[v])
		if (!used[e])
		{
			Dfs(e, b, i);
			if (TAKE)
			{
				krs[i].push_back(v);
				return;
			}
		}
}

int Check(int a, int b)
{
	int ans = 0;
	for (int i = 0, j = 0; i < krs[a].size() && j < krs[b].size();)
	{
		while (j < krs[b].size() && i < krs[a].size() && krs[a][i] < krs[b][j])
			i++;
		while (i < krs[a].size() && j < krs[b].size() && krs[b][j] < krs[a][i])
			j++;
		if (i < krs[a].size() && j < krs[b].size() && krs[a][i] == krs[b][j])
		{
			i++;
			j++;
			ans++;
		}
	}
	return max(0, ans - 1);
}

int main()
{
	ifstream fin("twopaths.in");
	ofstream fout("twopaths.out");
	int n, k;
	fin >> n >> k;
	arr.resize(n + 1);
	for (int i = 2; i <= n; i++)
	{
		int p;
		fin >> p;
		arr[p].push_back(i);
		arr[i].push_back(p);
	}
	krs.resize(k + 1);
	for (int i = 0; i < k; i++)
	{
		int a, b;
		fin >> a >> b;
		fill(used, used + n, 0);
		TAKE = false;
		Dfs(a, b, i);
		sort(krs[i].begin(), krs[i].end());
	}
	int ans = -1, A = -1, B = -1;
	for (int i = 0; i < k; i++)
		for (int j = i + 1; j < k; j++)
		{
			int ch = Check(i, j);
			if (ch > ans)
			{
				ans = ch;
				A = i;
				B = j;
			}
		}
	fout << ans << endl;
	fout << A + 1 << " " << B + 1 << endl;
	return 0;
}
#include <bits/stdc++.h>
using namespace std;

typedef long long ll;
const int INF = 2000000000;
const ll LINF = 8000000000000000000l;
#define mp make_pair

string s;
string sres;
int n, k, ans;

#ifdef _DEBUG
const int MAXS = 15;
#else
const int MAXS = 1001;
#endif

int arr[MAXS][MAXS][2];

void solvecase_nk(){
	arr[0][1][0] = int(s[0] == '1');
	arr[0][1][1] = int(s[0] == '0');
	//cerr << s << "\n";
	for(int i = 1; i < n; i++){
		arr[i][0][0] = arr[i][0][1] = INF;
		int e1 = int(s[i] == '1');
		int e0 = e1 ^ 1;
		for(int j = 1; j <= i + 1; j++){
			arr[i][j][0] = min(arr[i-1][j][0], arr[i-1][j-1][1]) + e1;
			arr[i][j][1] = min(arr[i-1][j][1], arr[i-1][j-1][0]) + e0;
		}
	}
	int inow = n - 1, jnow, cnow;
	sres.assign(n, '?');
	ans = INF;
	for(int j = 1; j <= k; j++){
		if(arr[n-1][j][1] > arr[n-1][j][0]){
			if(arr[n-1][j][0] < ans){
				ans = arr[n-1][j][0];
				jnow = j;
				cnow = 0;
			}
		} else {
			if(arr[n-1][j][1] < ans){
				ans = arr[n-1][j][1];
				jnow = j;
				cnow = 1;
			}
		}
	}
	while(inow > 0){
		sres[inow] = '0' + cnow;
		//cerr << sres << "\n";
		inow--;
		//cerr << arr[inow][jnow][cnow] << " " << arr[inow][jnow - 1][cnow ^ 1] << "\n";
		if(arr[inow][jnow][cnow] > arr[inow][jnow - 1][cnow ^ 1]){
			jnow--;
			cnow ^= 1;
		}
	}
	sres[0] = '0' + cnow;
}

void solvecase_nlogn(){
	int bcol = s[0] - '0';
	list<pair<int, int> > plist;
	int in_part = 1;
	for(int i = 1; i < n; i++){
		if(s[i] == s[i-1]){
			in_part++;
		} else {
			plist.push_back(mp(in_part, i));
			in_part = 1;
		}
	}
	plist.push_back(mp(in_part, n));
	map<pair<int, int>, list<pair<int, int> >::iterator> mp2;
	auto it = plist.begin();
	it++;
	auto eit = plist.end();
	eit--;
	for(; it != eit; it++){
		mp2.insert(mp(*it, it));
	}
	sres.assign(n, '0');
	while((int)plist.size() - 2 > k){
		auto it = mp2.begin();
		list<pair<int, int> >::iterator pit_m = it->second;
		mp2.erase(it);
		list<pair<int, int> >::iterator pit_l = pit_m, pit_r = pit_m;
		pit_l--;
		pit_r++;
		mp2.erase(*pit_l);
		mp2.erase(*pit_r);
		int nval = pit_l->first + pit_r->first - pit_m->first;
		if(pit_r == eit){
			pit_r->first = nval;
			plist.erase(pit_m);
			plist.erase(pit_l);
		} else {
			pit_l->first = nval;
			plist.erase(pit_m);
			plist.erase(pit_r);
			if(pit_l != plist.begin()){
				mp2.insert(mp(*pit_l, pit_l));
			}
		}
	}
	if((int)plist.size() <= k){
		it = plist.begin();
		for(int i = 0; i < n; i++){
			if(it->second == i){
				it++;
				bcol ^= 1;
			}
			sres[i] = '0' +  bcol;
		}
		bcol = s[0] - '0';
		return;
	}
	if((int)plist.size() - 2 == k){
		if(!mp2.empty() && mp2.begin()->first.first <= plist.begin()->first + eit->first){
			auto it = mp2.begin();
			list<pair<int, int> >::iterator pit_m = it->second;
			mp2.erase(it);
			list<pair<int, int> >::iterator pit_l = pit_m, pit_r = pit_m;
			pit_l--;
			pit_r++;
			mp2.erase(*pit_l);
			mp2.erase(*pit_r);
			int nval = pit_l->first + pit_r->first - pit_m->first;
			if(pit_r == eit){
				pit_r->first = nval;
				plist.erase(pit_m);
				plist.erase(pit_l);
			} else {
				pit_l->first = nval;
				pit_l->second = pit_r->second;
				plist.erase(pit_m);
				plist.erase(pit_r);
				if(pit_l != plist.begin()){
					mp2.insert(mp(*pit_l, pit_l));
				}
			}
		} else {
			plist.pop_back();
			plist.back().second = n;
			plist.pop_front();
			bcol ^= 1;
		}
	} else {
		if(!mp2.empty() && mp2.begin()->first.first <= min(plist.begin()->first, eit->first)){
			auto it = mp2.begin();
			list<pair<int, int> >::iterator pit_m = it->second;
			mp2.erase(it);
			list<pair<int, int> >::iterator pit_l = pit_m, pit_r = pit_m;
			pit_l--;
			pit_r++;
			mp2.erase(*pit_l);
			mp2.erase(*pit_r);
			int nval = pit_l->first + pit_r->first - pit_m->first;
			if(pit_r == eit){
				pit_r->first = nval;
				plist.erase(pit_m);
				plist.erase(pit_l);
			} else {
				pit_l->first = nval;
				pit_l->second = pit_r->second;
				plist.erase(pit_m);
				plist.erase(pit_r);
				if(pit_l != plist.begin()){
					mp2.insert(mp(*pit_l, pit_l));
				}
			}
		} else {
			if(plist.front().first < plist.back().first){
				plist.pop_front();
				bcol ^= 1;
			} else {
				plist.pop_back();
				plist.back().second = n;
			}
		}
	}
	it = plist.begin();
	for(int i = 0; i < n; i++){
		if(it->second == i){
			it++;
			bcol ^= 1;
		}
		sres[i] = '0' +  bcol;
	}
}

int main(){
	ios_base::sync_with_stdio(0);
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	freopen("penguins.in", "r", stdin);
	freopen("penguins.out", "w", stdout);
#endif
	int caseall;
	cin >> caseall;
	fill(arr[0][0], arr[0][0] + MAXS * MAXS * 2, INF);
	for(int casenum = 0; casenum < caseall; casenum++){
		cin >> n >> k >> s;
		//solvecase_nk();
		solvecase_nlogn();
		cout << sres << "\n";
	}
}

#include <cstdio>
#include <iostream>
#include <vector>
#include <conio.h>
#include <cmath>
#include <algorithm>

using namespace std;

typedef long long ll;

const int INF = int(1e9) + 7;

int n, k, miny[int(1e6) + 10], maxy[int(1e6) + 10], kmod[int(1e5) + 10], num, x[int(1e6) + 10], y[int(1e6) + 10], kmod1[int(1e5) + 10];
vector <int> ys;

ll res;

int mdiv(int x, int y)
{
	return (x % y == 0 ? x / y : x / y + 1);
}

int main()
{
	freopen("monument.in", "r", stdin);
	freopen("monument.out", "w", stdout);
	cin >> n >> k;

	for (int i = 0; i < int(1e6) + 9; i++)
		miny[i] = INF;

	for (int i = 0; i < n; i++)
	{
		scanf("%d%d", &x[i], &y[i]);
		if (i > 0 && x[i] == x[i - 1])
		{
			if (y[i] > y[i - 1])
			{
				for (int j = y[i - 1]; j < y[i]; j++)
					maxy[j] = max(maxy[j], x[i]);
			}
			if (y[i] < y[i - 1])
			{
				for (int j = y[i]; j < y[i - 1]; j++)
					miny[j] = min(miny[j], x[i]);
			}
		}
		ys.push_back(y[i]);
	}

	if (x[0] == x[n - 1])
	{
		if (y[0] > y[n - 1])
		{
			for (int j = y[n - 1]; j < y[0]; j++)
				maxy[j] = max(maxy[j], x[0]);
		}
		if (y[0] < y[n - 1])
		{
			for (int j = y[0]; j < y[n - 1]; j++)
				miny[j] = min(miny[j], x[0]);
		}
	}

	sort(ys.begin(), ys.end());
	
	ys.resize(unique(ys.begin(), ys.end()) - ys.begin());

	num = ys.back() - ys[0];

	for (int i = ys[0]; i < ys.back(); i++)
	{
		miny[i] += mdiv(i, k) * k - i;
		maxy[i] += mdiv(i, k) * k - i;
	}
	for (int i = ys[0]; i < ys.back(); i++)
	{
		/*kmod[miny[i] % k]++;
		kmod[maxy[i] % k]++;
		if (miny[i] % k == maxy[i] % k)
			kmod[miny[i] % k]--;*/

		int l = miny[i] % k, r = maxy[i] % k;
		if (l < r)
		{
			kmod1[l + 1]++;
			kmod1[r]--;
		}

		if (r <= l)
		{
			kmod1[0]++;
			kmod1[r]--;
			kmod1[l + 1]++;
			kmod1[k]--;
		}

	}
	kmod[0] = kmod1[0];
	for (int i = 1; i < k; i++)
		kmod[i] = kmod[i - 1] + kmod1[i];

	for (int i = ys[0]; i < ys.back(); i++)
		res += mdiv(maxy[i] - miny[i], k);

	res += *min_element(kmod, kmod + k);

	cout << res;

	//_getch();

	return 0;
}
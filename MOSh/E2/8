#include<iostream>
#include<cstdlib>
#include<cstdio>
#include<vector>
#include<string>
#include<algorithm>
#include<set>
#include<queue>
#pragma warning(disable:4996)
using namespace std;
vector <long long> t(1000001);
vector <long long > t2(1000001);
void update(long long p, long long vl) {
	for (long long i = p; i < 1000001; i = (i | (i + 1)))
		t[i] += vl;
}
long long sum(long long r){
	long long ans = 0;
	for (long long i = r; i >= 0; i = (i&(i + 1)) - 1)
		ans += t[i];
	return ans;
}
void update1(long long p, long long vl) {
	for (long long i = p; i < 1000001; i = (i | (i + 1)))
		t2[i] += vl;
}
long long sum1(long long r) {
	long long ans = 0;
	for (long long i = r; i >= 0; i = (i&(i + 1)) - 1)
		ans += t2[i];
	return ans;
}
int main() {
#ifdef _DEBUG
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	freopen("fisher.in", "r", stdin);
	freopen("fisher.out", "w", stdout);
#endif
	long long n, m;
	long long p;
	cin >> n >> m >> p;
	queue <pair <long long, long long> > q1;
	queue <pair <long long, pair <long long,long> > > q2;
	for (long long i = 0; i < n; i++) {
		long long y;
		long long x;
		scanf("%lld%lld",&y, &x);
		q1.push(make_pair(y,x));
	}
	for (long long i = 0; i < m; i++) {
		long long y;
		long long x,z;
		scanf("%lld%lld%lld", &y, &x, &z);
		q2.push(make_pair(y, make_pair(x,z)));
	}
	vector <vector <long long> > a(n + m, vector <long long>(4));
	long long sh = 0;
	while (q1.size() != 0 && q2.size() != 0) {
		if (q1.front().first <= q2.front().first) {
			a[sh][0] = q1.front().first;
			a[sh][1] = q1.front().second;
			a[sh][2] = 1;
			q1.pop();
			sh++;
		}
		else {
			a[sh][0] = q2.front().first;
			a[sh][1] = q2.front().second.first;
			a[sh][3] = q2.front().second.second;
			a[sh][2] = 2;
			q2.pop();
			sh++;
		}
	}
	while (q1.size() != 0) {
		a[sh][0] = q1.front().first;
		a[sh][1] = q1.front().second;
		a[sh][2] = 1;
		q1.pop();
		sh++;
	}
	while (q2.size() != 0) {
		a[sh][0] = q2.front().first;
		a[sh][1] = q2.front().second.first;
		a[sh][2] = 2;
		a[sh][3] = q2.front().second.second;
		q2.pop();
		sh++;
	}
	long long ans = 0;
	long long rb = 0;
	for (long long i = 0; i < n + m; i++) {
		if (a[i][2] == 1)
			rb += a[i][1];
		if (a[i][2] == 2) {
			update(1e6 - a[i][3], a[i][1]);
			update1(1e6 - a[i][3], a[i][1] * a[i][3]);
		}
		long long l = -1, r = 1e6 + 1;
		if (sum(1e6) <= rb)
			ans = max(ans, sum1(1e6) - a[i][0] *p);
		else {
			while (r - l > 1) {
				long long m = (r + l) / 2;
				if (sum(m) < rb)
					l = m;
				else
					r = m;
			}
			if(l != -1)
				ans = max(ans, sum1(l) + (rb - sum(l))*((long long)1e6- l -1) - p*a[i][0]);
			else
				ans = max(ans,(rb - sum(l))*((long long)1e6 - l - 1) - p*a[i][0]);
		}
	}
	cout << ans;
	return 0;
}
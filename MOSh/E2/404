#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <queue>

using namespace std;

vector<int> d;
vector<vector<pair<int, int> > > graph;
vector<set<int> > d_i;
vector<vector<int> > new_graph;
vector<bool> used;
vector<vector<int> > inv_graph;
vector<int> color;
int now_col = 0;
vector<bool> is_start;
int _count = 0;

int dfs(int v, int prev, int D, int start_v)
{
    if (D < 0) return 0;
    int ans = 1;
    for (int i = 0; i < graph[v].size(); i++)
    {
        if (prev != graph[v][i].first)
        {
            ans += dfs(graph[v][i].first, v, D - graph[v][i].second, start_v);
        }
    }
    if (start_v != v) d_i[start_v].insert(v);
    //cout << v + 1 << " " << start_v + 1 << " " << d_i[v].size() << endl;
    return ans;
}

void col_dfs(int v, int col, int new_col)
{
    is_start[v] = false;
    color[v] = new_col;
    for (int i = 0; i < new_graph[v].size(); i++)
    {
        if (color[new_graph[v][i]] == col)
        {
            col_dfs(new_graph[v][i], col, new_col);
        }
    }
}

void dfs2(int v)
{
    used[v] = true;
    color[v] = now_col;
    for (int i = 0; i < new_graph[v].size(); i++)
    {
        if (!used[new_graph[v][i]])
        {
            if (d_i[new_graph[v][i]].find(v) != d_i[new_graph[v][i]].end())
            {
                is_start[new_graph[v][i]] = true;
            }
            dfs2(new_graph[v][i]);
        }
        else if (color[new_graph[v][i]] != color[v])
        {
            //cout << "A" << endl;
            if (is_start[new_graph[v][i]])
            {
                _count--;
                is_start[new_graph[v][i]] = false;
                //col_dfs(new_graph[v][i], color[new_graph[v][i]], color[v]);
            }
            //col_dfs(new_graph[v][i], color[new_graph[v][i]], color[v]);
            //minus_n++;
            //cout << "B" << endl;
            //dfs2(new_graph[v][i]);
        }
    }
}

int main()
{
    ifstream fin("alarm.in");
    ofstream fout("alarm.out");
    int n;
    fin >> n;
    d.resize(n);
    for (int i = 0; i < n; i++)
    {
        fin >> d[i];
    }
    graph.resize(n);
    for (int i = 0; i < n - 1; i++)
    {
        int a, b, c;
        fin >> a >> b >> c;
        graph[a - 1].push_back(make_pair(b - 1, c));
        graph[b - 1].push_back(make_pair(a - 1, c));
    }
    d_i.resize(n);
    for (int i = 0; i < n; i++)
    {
        dfs(i, -1, d[i], i);
    }
    //cout << endl << endl;
    /*for (int i = 0; i < n; i++)
    {
        cout << i + 1 << endl;
        for (set<int>::iterator j = d_i[i].begin(); j != d_i[i].end(); j++)
        {
            cout << (*j) + 1 << " ";
        }
        cout << endl;
    }*/
    new_graph.resize(n);
    inv_graph.resize(n);
    for (int i = 0; i < n; i++)
    {
        for (set<int>::iterator j = d_i[i].begin(); j != d_i[i].end(); j++)
        {
            new_graph[i].push_back((*j));
            inv_graph[(*j)].push_back(i);
            //new_graph[(*j)].push_back(i);
        }
    }
    /*for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < new_graph[i].size(); j++)
        {
            cout << new_graph[i][j] + 1 << " ";
        }
        cout << endl;
    }*/
    used.resize(n, false);
    color.resize(n, -1);
    is_start.resize(n, false);
    //int _count = 0;
    for (int i = 0; i < n; i++)
    {
        if (!used[i])
        {
            _count++;
            is_start[i] = true;
            dfs2(i);
           // _count++;
            now_col++;
        }
    }
    /*set<int> SET;
    for (int i = 0; i < n; i++)
    {
        SET.insert(color[i]);
    }*/
    fout << _count << endl;
    fin.close();
    fout.close();
}

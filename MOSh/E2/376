#include<fstream>
#include<time.h>
#include<algorithm>
#include<string>
#include<map>
#include<vector>
using namespace std;

vector<int> v1;
vector<int> v2;
ifstream cin("mountain.in");
ofstream cout("mountain.out");

long long i, j, n, q,l,r,l1,r1,l2,r2,m, k[100001], d[100001], x[100001], y[100001], fk=0;
int main() {
	long long m1, m2, x1, y1;
	double k1, k2;
	cin >> n >> q;
	x[0] = 0;
	y[0] = 0;
	for (i = 1; i <= n; i++) {
		cin >> d[i] >> k[i];
		x[i] = x[i - 1] + d[i];
		y[i] = y[i - 1] + k[i] * d[i];
		if (k[i] != 1 && k[i] != -1)
			fk = 1;
		else if (k[i] == 1)
			v1.push_back(i);
		else v2.push_back(i);
	}
	while (q > 0) {
		q--;
		cin >> x1 >> y1;
		if (q <= 3000 && n <= 3000) {
			m1 = 0;
			if (x1 != 0) {
				k1 = double(y1 - y[0]) / double(x1 - x[0]);
				for (i = 1; i <= n && x[i] < x1; i++) {
					k2 = double(y1 - y[i]) / double(x1 - x[i]);
					if (k1 > k2)
						m1 = x[i];
					k1 = k2;
					j = i;
				}
			}
			m2 = x[n];
			if (x1 != x[n]) {
				k1 = double(y[n] - y1) / double(x[n] - x1);
				for (i = n - 1; i >= 0 && x[i] > x1; i--) {
					k2 = double(y[i] - y1) / double(x[i] - x1);
					if (k1 < k2)
						m2 = x[i];
					k1 = k2;
					j = i;
				}
			}
			cout << m1 << ' ' << m2 << endl;
		}
		else {
			l = 0;
			r = n;
			while (r - l>1) {
				m = (l + r) / 2;
				if (x[m] > x1)
					r = m - 1;
				else l = m;
			}
			while (r > 0 && x[r] >= x1)
				r--;
			l = 0;
			if (r > 0) {
				while (r-l!=0) {
					m = (l + r) / 2;
					if (x[m] < x1) {

						k2 = double(y1 - y[m]) / double(x1 - x[m]);
						if (k2 <= 1)
							r = m - 1;
						else l = m;
					}
				}
				k2 = double(y1 - y[r]) / double(x1 - x[r]);
				if (k2 <= 1)
					r--;
				l1 = 0;
				r1 = v1.size();
				while (l1 - r1 > 1) {
					m = (l1 + r1) / 2;
					if (v1[m] > r)
						r1 = m - 1;
					else l1 = m;
				}
				while (r1 >= 0 && v1[r1] > r)
					r1--;
				if (r1 < 0)
					m1 = 0;
				else m1 = x[v1[r1]];

			}

			else m1 = 0;




			l = 0;
			r = n;
			while (r - l>1) {
				m = (l + r) / 2;
				if (x[m] < x1)
					l = m + 1;
				else r = m;
			}
			while (l<n && x[l] <= x1)
				l++;
			r = n;
			if (l < n) {
				while (r - l>1) {
					m = (l + r) / 2;
					if (x[m] > x1) {

						k2 = double(y[m] - y1) / double(x[m] - x1);
						if (k2 >= -1)
							r = m - 1;
						else l = m;
					}
					k2 = double(y[r] - y1) / double(x[r] - x1);
					if (k2 >= -1)
						r--;
					l1 = 0;
					r1 = v2.size();
					while (l1 - r1 > 1) {
						m = (l1 + r1) / 2;
						if (v2[m] > r)
							r1 = m - 1;
						else l1 = m;
					}
					while (r1 >= 0 && v2[r1] < r)
						r1--;
					if (r1 < 0)
						m2 = x[n];
					else m2 = x[v2[r1]];

				}
			}
			else m2 = x[n];
			cout << m1 << ' ' << m2 << endl;
		}
	}
	system("pause");
	return 0;

}
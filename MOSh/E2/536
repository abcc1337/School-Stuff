program Aa1;

{$APPTYPE CONSOLE}
{$O-}

uses
  SysUtils, Math;

var i, j, k, h, w, l, u: integer;
    n, zz, x, y, z: int64;
    a, ans, mul, ad: array[1..64] of integer;

procedure mmul(d: integer);
var i: integer;
    k, z: int64;
begin
  z := 0;
  for i := 1 to d do mul[i] := 0;
  for i := d downto 1 do z := z * 2 + ans[i];
  zz := z;
  z := z*3;
  i := 1;
  while z > 0 do begin
    mul[i] := z mod 2;
    z := z div 2;
    inc(i);
  end;
end;

procedure minus;
var z: int64;
    i: integer;
begin               
  for i := 1 to l do ad[i] := 0;
  z := n - zz * 3;
  i := 1;
  if z < 0 then ad[1] := -5
  else begin 
    while z > 0 do begin
      ad[i] := z mod 2;
      z := z div 2;
      inc(i);
    end;
  end;
end;

function dif(d: integer): boolean;
var i: integer;
    b: boolean;
begin
  b := true;
  if ad[1] < 0 then b := false;
  for i := 1 to d do begin
    if (ans[i] = 1) and (ad[i] = 1) and not ((i > 1) and (ans[i - 1] = 0) and (ad[i - 1] = 0)) then b := false;
  end;
  dif := b;
end;

procedure fract(z: int64);
var i: integer;
begin
  i := 1;
  while z > 0 do begin
    a[i] := z mod 2;
    z := z div 2;
    inc(i);
  end;
  l := i - 1;
end;

procedure search(d: integer);
var i, f: integer;
begin
  if d > 0 then begin
    ans[d] := 1;
    mmul(l);
    minus;
    if dif(l) then begin
      u := d;
      search(d - 1);
    end
    else if ad[1] >= 0 then begin
      f := d - 1;
      while(ad[1] >= 0) and(f > 0) and (not dif(l)) do begin
        ans[f] := 1;
        dec(f);
        mmul(l);
        minus;
      end;
      if dif(l) then u := f + 1
      else begin
        for i := f to d do ans[i] := 0;
        u := d;
      end;
      search(u - 1);
    end
    else begin
      ans[d] := 0;
      u := d;
      search(u - 1);
    end;
  end
  else exit;
end;

begin
  reset(input, 'grants.in');
  rewrite(output, 'grants.out');
  read(k);
  for j := 1 to k do begin
    read(n);
    for i := 1 to 63 do begin
      a[i] := 0;
      ans[i] := 0;
    end;
    fract(n);
    u := l + 1;
    search(l - 1);
    mmul(l);
   // writeln(zz, ' ', zz, ' ', n - (2 * zz));
    write(zz, ' ');
    x := n - 3 * zz;
    y := zz;
    z := x and y;
    x := y + x - (z div 2);
    y := y + (z div 2);
    write(x, ' ', y);
  end;
//  readln;
//  readln;
end.

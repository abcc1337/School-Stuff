
#include <iostream>
#include <vector>
#include <algorithm>
#include <string>
#define LOCAL1
using namespace std;

int main()
{
	ios::sync_with_stdio(0);
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	freopen("output.txt", "w", stdout);
#else
	freopen("penguins.in", "r", stdin);
	freopen("penguins.out", "w", stdout);
#endif
	int t;
	cin >> t;
	for (int z = 0; z < t; z++)
	{
		int n, k;
		cin >> n >> k;
		string a(n, 0);
		for (int i = 0; i < n; i++)
		{
			char ch;
			cin >> ch;
			a[i] = ch - '0';
		}

		vector<int> len(1), col(1);
		len[0] = 1;
		col[0] = a[0];

		for (int i = 1; i < n; i++)
		{
			if (a[i] == a[i - 1])
			{
				len.back()++;
			}
			else
			{
				len.push_back(1);
				col.push_back(a[i]);
			}
		}
		int cnt = len.size();
		if (k >= cnt)
		{
			for (int i = 0; i < a.size(); i++)
			{
				cout << (char)('0' + a[i]);
			}
			cout << endl;
			continue;
		}
		vector<vector<vector<int> > > dp(cnt, vector<vector<int> >(k + 1, vector<int>(2, 1e4)));
		dp[0][1][col[0]] = 0;
		dp[0][1][!col[0]] = len[0];
		for (int i = 1; i < cnt; i++)
		{
			for (int j = 1; j <= min(k, cnt); j++)
			{
				for (int c = 0; c < 2; c++)
				{
					if (c == col[i])
					{
						dp[i][j][c] = min(dp[i - 1][j][c], dp[i - 1][j - 1][!c]);
					}
					else
					{
						dp[i][j][c] = min(dp[i - 1][j][c] + len[i], dp[i - 1][j - 1][!c] + len[i]);
					}
				}
			}
		}
		int val = 1e9;
		int i1, c1;
		for (int i = 0; i <= k; i++)
		{
			for (int c = 0; c < 2; c++)
			{
				if (dp[cnt - 1][i][c] < val)
				{
					val = dp[cnt - 1][i][c];
					i1 = i;
					c1 = c;
				}
			}
		}

		int pos = cnt - 1;
		string ans;
		while (pos != 0)
		{
			for (int i = 0; i < len[pos]; i++)
			{
				ans.push_back('0' + c1);
			}
			if (c1 == col[pos])
			{
				if (dp[pos][i1][c1] == dp[pos - 1][i1][c1])
				{
					pos--;
				}
				else
				{
					pos--;
					c1 = !c1;
					i1--;
				}
			}
			else
			{
				if (dp[pos][i1][c1] == dp[pos - 1][i1][c1] + len[pos])
				{
					pos--;
				}
				else
				{
					pos--;
					c1 = !c1;
					i1--;
				}
			}
		}
		for (int i = 0; i < len[pos]; i++)
		{
			ans.push_back(c1 + '0');
		}
		reverse(ans.begin(), ans.end());
		//cout << val << endl;
		cout << ans << endl;
	}
	return 0;
}
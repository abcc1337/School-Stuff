program zad_3;

{$APPTYPE CONSOLE}

uses
  SysUtils;

var
    a, mark :array[1..123, 1..123] of integer;
    d :array[1..101, 1..101, 1..101, 1..101] of boolean;
    n, q, aa, bb, i, j, u, x, y, x1, y1, x2, y2, kol :integer;
    ch :char;

procedure dfs(x, y :integer);
begin
    if (x < x1) or (x > x2) or (y < y1) or (y > y2) then
        exit;
    mark[x][y] := u;
    if (x - 1 > 0) and (mark[x - 1][y] <> u) and (d[x][y][x - 1][y]) then
        dfs(x - 1, y);
    if (y - 1 > 0) and (mark[x][y - 1] <> u) and (d[x][y][x][y - 1]) then
        dfs(x, y - 1);
    if (x + 1 <= aa) and (mark[x + 1][y] <> u) and (d[x][y][x + 1][y]) then
        dfs(x + 1, y);
    if (y + 1 <= bb) and (mark[x][y + 1] <> u) and (d[x][y][x][y + 1]) then
        dfs(x, y + 1);
end;

begin
    reset(input, 'repair.in');
    rewrite(output, 'repair.out');
    readln(aa, bb);
    readln(n, q);
    for i := 1 to n - 1 do
    begin
        readln(ch, x, y);
        a[x][y] := 1;
        if (ch = 'h') then
        begin
            a[x + 1][y] := 1;
            d[x][y][x + 1][y] := true;
            d[x + 1][y][x][y] := true;
        end
        else
        begin
            a[x][y + 1] := 1;
            d[x][y][x][y + 1] := true;
            d[x][y + 1][x][y] := true;
        end;
    end;
    for u := 1 to q do
    begin
        kol := 0;
        readln(x1, y1, x2, y2);
        for i := x1 to x2 do
            for j := y1 to y2 do
            if (mark[i][j] <> u) and (a[i][j] = 1) then
            begin
                dfs(i, j);
                inc(kol);
            end;
        writeln(kol);
    end;

end.


4 3
8 4
v 1 1
h 1 1
h 2 1
v 2 1
v 2 2
h 1 3
h 3 1
1 1 4 3
3 2 4 3
3 1 3 1
1 2 3 3



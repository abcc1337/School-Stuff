#include <iostream>
#include <string>
#include <vector>
#include <map>
#include <set>
#include <fstream>
#include <cmath>
#include <algorithm>
#include <queue>

using namespace std;

int main()
{
    ifstream fin("lamps.in");
    ofstream fout("lamps.out");
    int n, q;
    fin >> n >> q;
    vector<int> val(n);
    for (int i = 0; i < n; i++)
    {
        char c;
        fin >> c;
        val[i] = int(c - '0');
    }
    vector<vector<bool> > was_g(n, vector<bool>(n, false));
    set<pair<int, int> > SET;
    int _count = 0;
    for (int i = 0; i < n; i++)
    {
        for (int j = 0; j < n; j++)
        {
            int type = -1;
            for (int k = i; k <= j; k++)
            {
                if (type == -1)
                {
                    type = val[k];
                }
                else if (type == 0 && val[k] == 1)
                {
                    type = -2;
                    k = j + 1;
                }
                else if (type == 1 && val[k] == 0)
                {
                    type = -2;
                    k = j + 1;
                }
            }
            if (type > 0)
            {
                was_g[i][j] = true;
                _count++;
                //cout << i + 1 << " " << j + 1 << endl;
            }
            else if (i <= j)
            {
                SET.insert(make_pair(i, j));
            }
        }
    }
    fout << _count << endl;
    int min_l = n, min_r = -1;
    for (int tmp = 0; tmp < q; tmp++)
    {
        int l, r, t;
        fin >> l >> r >> t;
        if (t == 0)
        {
            min_l = min(min_l, l);
            min_r = max(min_r, r);
        }
        if (t == 1)
        {
            for (int j = min_l - 1; j < min_r; j++)
            {
                val[j] = 0;
            }
            min_l = n;
            min_r = -1;
            for (int j = l - 1; j < r; j++)
            {
                val[j] = t;
            }
            vector<pair<int, int> > ERASE_v;
            for (set<pair<int, int> >::iterator q = SET.begin(); q != SET.end(); q++)
            {
                if ((*q).first >= l - 1 && (*q).second < r)
                {
                    was_g[(*q).first][(*q).second] = true;
                    _count++;
                    ERASE_v.push_back((*q));
                }
                else
                {
                    int type = -1;
                    for (int k = (*q).first; k <= (*q).second; k++)
                    {
                        if (type == -1)
                        {
                            type = val[k];
                        }
                        else if (type == 0 && val[k] == 1)
                        {
                            type = -2;
                            k = (*q).second + 1;
                        }
                        else if (type == 1 && val[k] == 0)
                        {
                            type = -2;
                            k = (*q).second + 1;
                        }
                    }
                    if (type > 0 && was_g[(*q).first][(*q).second] == false)
                    {
                        was_g[(*q).first][(*q).second] = true;
                        _count++;
                        ERASE_v.push_back((*q));
                    }
                }
            }
            for (int i = 0; i < ERASE_v.size(); i++)
            {
                SET.erase(ERASE_v[i]);
            }
        }
        fout << _count << endl;
    }
    fin.close();
    fout.close();
}

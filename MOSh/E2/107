#include <iostream>
#include <fstream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <time.h>
#include <set>
#include <map>
using namespace std;
long long d[1000];
long long a[1000][1000];
pair <long long, long long>  tout[1000];
bool used[1000];
long long t = 0;
long long n;
vector <long long> b[1000];

void dfs(long long v, long long st)
{
    //cout << v << endl;
    used[v] = true;
    for (long long i = 0; i < n; i++)
    {
        //cout << d[v] << " " << a[v][i] << endl;
        if ((!used[i]) && d[v] >= a[v][i])
        {
            b[st].push_back(i);
            dfs(i, st);
        }
    }
}

void dfs1(long long v)
{
    //cout << v << endl;
    used[v] = true;
    for (long long i = 0; i < b[v].size(); i++)
    {
        //cout << b[v][i] << "bbb " << endl;
        if (!used[b[v][i]])
            dfs1(b[v][i]);
    }
    t++;
    tout[v].first = t;
    tout[v].second = v;
    //cout << v << " " << t << endl;
}

int main()
{
    freopen("alarm.in", "r", stdin);
    freopen("alarm.out", "w", stdout);
    long long i, j, k;
    cin >> n;
    for (i = 0; i < n; i++)
        cin >> d[i];
    for (i = 0; i < n; i++)
        for (j = 0; j < n; j++)
            if (i != j)
                a[i][j] = 200000000000000000;
    for (i = 0; i < n - 1; i++)
    {
        long long u, v, l;
        cin >> u >> v >> l;
        u--;
        v--;
        a[u][v] = l;
        a[v][u] = l;
    }
    for (k = 0; k < n; k++)
        for (i = 0; i < n; i++)
            for (j = 0; j < n; j++)
                a[i][j] = min(a[i][j], a[i][k] + a[k][j]);
    /*for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
        {
            cout << a[i][j] << " ";
            if (a[i][j] < 10)
                cout << " ";
        }
        cout << endl;
    }*/
    for (i = 0; i < n; i++)
    {
        for (j = 0; j < n; j++)
            used[j] = false;
        dfs(i, i);
        //cout << "aa " << endl;
    }
   // for (i = 0; i < n; i++)
   // {
      //  for (j = 0; j < b[i].size(); j++)
       //     cout << b[i][j] << " ";
       // cout << endl;
    //}
    for (i = 0; i < n; i++)
        used[i] = false;
    for (i = 0; i < n; i++)
    {
        if (!used[i])
            dfs1(i);
        //cout << "----" << endl;;
    }
    sort(tout, tout + n);
    for (i = 0; i < n; i++)
        used[i] = false;
    long long cnt = 0;
    for (i = 0; i < n; i++)
    {
        long long now = tout[i].second;
        if (! used[i])
        {
            //cout << i + 1 << endl;
            cnt++;
            for (j = 0; j < b[i].size(); j++)
                used[b[i][j]] = true;
        }
    }
    cout << cnt;
    return 0;
}

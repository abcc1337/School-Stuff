#include <iostream>
#include <cstdio>
#include <cstdlib>
#include <vector>
#include <cmath>
#include <algorithm>
#include <vector>
#include <set>
#include <queue>

using namespace std;

int N;
vector<int> D;
vector<vector<pair<int, int> > > G;
queue<pair<int, int> > Order;
vector<int> Best;

vector<vector<char> > Poss;
vector<int> Visited;
int Start;

void bfs()
{
    int V = Order.front().first, Dist = Order.front().second; Order.pop();

    if (Best[V] > Dist)
    {
        return;
    }

    if (V != Start)
    {
        Poss[Start].push_back(V);
    }

    //printf("TEST %d %d\n", V + 1, Dist);
    int New_Dist;
    for (int i = 0; i < G[V].size(); ++i)
    {
        New_Dist = max(D[G[V][i].first], Dist - G[V][i].second);
        //printf("%d %d\n", G[V][i].first + 1, New_Dist);
        if ((Dist >= G[V][i].second) and (Best[G[V][i].first] < New_Dist))
        {
            Best[G[V][i].first] = New_Dist;
            Order.push(make_pair(G[V][i].first, New_Dist));
            //printf("GO!\n");
        }
    }
}

void dfs_2(int V)
{
    Visited[V] = 1;

    for (int i = 0; i < Poss[V].size(); ++i)
    {
        if (not Visited[Poss[V][i]])
        {
            dfs_2(Poss[V][i]);
        }
    }
}

int main()
{
    freopen("alarm.in", "r", stdin);
    freopen("alarm.out", "w", stdout);

    scanf("%d", &N);

    D.resize(N);
    for (int i = 0; i < N; ++i)
    {
        scanf("%d", &D[i]);
    }

    G.resize(N);
    int a, b, l;
    for (int i = 0; i < N - 1; ++i)
    {
        scanf("%d%d%d", &a, &b, &l); --a; --b;
        G[a].push_back(make_pair(b, l));
        G[b].push_back(make_pair(a, l));
    }

    Poss.resize(N);
    for (int i = 0; i < N; ++i)
    {
        Best.assign(N, -1);
        Start = i;
        Order.push(make_pair(i, D[i]));
        while (not (Order.empty()))
        {
            bfs();
        }
        //printf("\n");
    }
/*
    for (int i = 0; i < N; ++i)
    {
        printf("%d: ", i + 1);
        for (int j = 0; j < Poss[i].size(); ++j)
        {
            printf("%d ", Poss[i][j] + 1);
        }
        printf("\n");
    }
    printf("\n");
*/
    int Amount = 0;

    Visited.resize(N, 0);

    for (int i = 0; i < N; ++i)
    {
        if (not Visited[i])
        {
            ++Amount;
            dfs_2(i);
        }
    }

    cout << Amount << endl;

    return 0;
}

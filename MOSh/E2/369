#include <iostream>
#include <cmath>
#include <cstdio>
#include <algorithm>
#include <vector>
#include <set>
#include <map>
#include <string>

using namespace std;

const int maxn = 2000;
const int inf = (int) 1e9;
int now_min = inf;
int miny = inf;
int maxy = -inf;

vector <int> help[maxn];
pair <int, int> v[maxn];

int n, k;

int num(int y, int a, int b) {
	int fk = y % k;
	int nfk = fk;

	if (a > 100 || b > 100) {
		return 0;
	}

	while (a > nfk) {
		nfk += k;
	}

	int res = 0;

	if (a != nfk) {
		res++;
	}

	for (int i = a; i < b; i++) {
		if (i == nfk) {
			res++;
			nfk += k;
		}
	}

	return res;
}

int check(int miny, int maxy) {
	int res = 0;

	for (int i = miny; i < maxy; i++) {
		res += num(i, v[i].first, v[i].second);
	}

	return res;
}

int main() {
	freopen("monument.in", "r", stdin);
  freopen("monument.out", "w", stdout);

	scanf("%d %d", &n, &k);

	/*for (int i = 0; i < maxn; i++) {
		v[i] = make_pair(inf, -inf);
	}*/

	for (int i = 0; i < n; i++) {
		int x, y;
		scanf("%d %d", &x, &y);

		miny = min(miny, y);
		maxy = max(maxy, y);

		help[y].push_back(x);
	}

	if ((int) help[miny].size() < 2 || (int) help[maxy].size() < 2) {
		throw 1;
	}

	v[miny].first = min(help[miny][0], help[miny][1]);
	v[miny].second = max(help[miny][0], help[miny][1]);

	v[maxy].first = min(help[maxy][0], help[maxy][1]);
	v[maxy].second = max(help[maxy][0], help[maxy][1]);
	
	for (int i = miny + 1; i < maxy; i++) {
		if ((int)help[i].size() == 0) {
			v[i].first = v[i - 1].first;
			v[i].second = v[i - 1].second;
		}
		else if ((int)help[i].size() == 2) {
			v[i].first = min(help[i][0], help[i][1]);
			v[i].second = max(help[i][0], help[i][1]);
		}
		else {
			if ((int) help[i].size() > 4) {
				throw 1;
			}

			int a1, b1;

			for (int j = 0; j < (int) help[i].size(); j++) {
				if (help[i][j] != v[i - 1].first && help[i][j] != v[i - 1].second) {
					a1 = help[i][j];
				}
			}

			for (int j = 0; j < (int) help[i].size(); j++) {
				if (help[i][j] != v[i - 1].first && help[i][j] != v[i - 1].second && help[i][j] != a1) {
					b1 = help[i][j];
				}
			}

			v[i].first = min(a1, b1);
			v[i].second = max(a1, b1);
		}
	}

	now_min = check(miny, maxy);

	for (int i = 0; i <= 10 * k; i++) {
		for (int j = 1; j <= maxn; j++) {
			v[j].first++;
			v[j].second++;
		}
		now_min = min(now_min, check(miny, maxy));
	}

	cout << now_min;

	return 0;
}


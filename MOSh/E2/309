#include <bits/stdc++.h>

using namespace std;

#define forn(i, n) for (int i = 0; i < n; i++)
#define pb push_back
#define mp make_pair
#define x first
#define y second
#define NAME "typing"
#define sz(a) (a.size())
#define FREOPEN freopen(NAME".in", "r", stdin); freopen(NAME".out", "w", stdout);

typedef long long ll;
typedef pair < int, int > pii;
typedef pair < ll, ll > pll;

const int INF = 2e9;
const ll INF64 = 1e18;
const int N = 100100;
const int M = 3010;

struct node
{
    node *link[3];
    ll sum;
    node()
    {
        sum = INF64;
        link[0] = link[1] = NULL;
    }
} v;

int m, n, nn, L, a[N], b[N];
ll d[N];
string s, ss;

void push(ll x)
{
   node *u = &v;
   for (int i = nn - 1; i >= 0; i--)
   {
        int q = b[i];
        if (u->link[q] == NULL)
            u->link[q] = new node;
        u = u->link[q];
        u->sum = min(u->sum, x);
   }
   for (int i = nn - 1; i >= 0; i--)
   {
       u = &v;
       for (int j = i; j >= 0; j--)
       {
           int q = b[j];
            if (u->link[q] == NULL)
                u->link[q] = new node;
            u = u->link[q];
       }
       u->sum = min(u->sum, x);
   }
}

int main()
{
    FREOPEN;
    cin >> m >> n >> L >> s;
    s = " " + s;
    for (int i = 1; i <= m; i++)
        if (s[i] == '1')
            a[i] = 1;
    forn(i, n)
    {
        ll x;
        cin >> x >> ss;
        nn = sz(ss);
        forn(j, nn)
            b[j] = 0;
        forn(j, nn)
            if (ss[j] == '1')
                b[j] = 1;
        push(x);
    }
    for (int i = 1; i <= m; i++)
        d[i] = INF64;
    for (int i = 1; i <= m; i++)
    {
        node *u = &v;
        for (int j = i; j >= 1; j--)
        {
            int q = a[j];
            if (u->link[q] == NULL)
                break;
            u = u->link[q];
            if (u->sum != INF64)
            if (d[j - 1] != INF64)
            d[i] = min(d[i], u->sum + d[j - 1]);
        }
    }
    if (d[m] == INF64)
        cout << -1;
    else
        cout << d[m];
    return 0;
}



/*

9 2 8
000110100
1 100
1 11001


9 3 10
010110101
3 0101
10 011
2 100

3 1 3
100
1 101



*/





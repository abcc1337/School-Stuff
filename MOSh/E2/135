#include <iostream>
#include <cstdio>
#include <fstream>
#include <cmath>
#include <vector>
#include <map>
#include <set>
#include <algorithm>
#include <cstdlib>
#include <climits>
#include <cassert>
#include <functional>
#include <string>
#include <queue>
using namespace std;
struct fileOpener
{
	FILE *in, *out;
	fileOpener(string file_name)
	{
		in = freopen((file_name + ".in").c_str(), "r", stdin);
		out = freopen((file_name + ".out").c_str(), "w", stdout);
	}
	~fileOpener()
	{
		fclose(in);
		fclose(out);
	}
};

#define fori(i, n) for (int i = 0; i < (int)n; i++)
#define m_p(x, y) make_pair(x, y)
#define forit(it, v) for (auto it = (v).begin(); it != (v).end(); it++)
typedef long long llg;
typedef long double ldb;

typedef pair<llg, llg> vect;

vector<vect> v;
vector<bool> used;

map<llg, int> ins_l, outs_l, ins_r, outs_r;

int getDiv(int delta, int k)
{
	return (delta + k - 1) / k;
}

llg check(llg f, llg k)
{
	if (f == 0)
		return 0;
	llg ans = ins_l[f];
	forit(it, ins_l)
	{
		if (it->first < f)
			ans += it->second;
		else
			break;
	}

	forit(it, outs_r)
	{
		if (it->first < f)
			ans -= it->second;
		else
			break;
	}
	return ans;
}

llg check2(llg f, llg k)
{
	if (f == 0)
		return 0;
	llg ans = outs_l[f];
	forit(it, ins_r)
	{
		if (it->first < f)
			ans += it->second;
	}

	forit(it, outs_l)
	{
		if (it->first < f)
			ans -= it->second;
		else
			break;
	}
	return ans;
}

int main()
{
#ifdef LOCAL
	fileOpener FileOpener("test");
#else
	fileOpener FileOpener("monument");
#endif
	//---------------------------------------------------------------------

	int n, x, y, k;

	cin >> n >> k;
	fori(i, n)
	{
		cin >> x >> y;
		v.push_back(m_p(x, y));
	}
	used.resize(n, false);

	vect tv = m_p(LLONG_MAX, LLONG_MAX);
	llg mn_x = LLONG_MAX;

	int cur = 0;
	fori(i, n)
	{
		mn_x = min(mn_x, v[i].first);
		if ((v[i].second < tv.second) || (v[i].second == tv.second && v[i].first < tv.first))
		{
			cur = i;
			tv = v[i];
		}
	}

	llg curi, curj, pans;
	int tl, tr, l = cur, r = (cur + 1) % n;

	

	llg ans = 0;

	bool needBreak = false;
	
	while (true)
	{
		tl = l;
		do
		{
			used[tl] = true;
			tl = (tl - 1 + n) % n;
		} while (v[tl].second == v[l].second);

		l = (tl + 1) % n;

		used[l] = true;
		used[r] = true;
		curi = (v[l].first - v[l].second) / k;
		curj = v[l].second;

		while (curj != v[r].second)
		{
			x = curi * k + curj;
			if (x > v[l].first)
				x -= k;

			pans = getDiv(v[r].first - x, k);
			ans += pans;
			outs_l[v[l].first - x]++;
			ins_l[k - (v[l].first - x)]++;

			x += pans * k;
			outs_r[x - v[r].first]++;
			ins_r[k - (x - v[r].first)]++;
			curj++;
		}
		tr = r;
		do
		{
			tr = (tr + 1) % n;
			if (used[tr])
			{
				needBreak = true;
				break;
			}
			used[tr] = true;
		} while (v[tr].second == v[r].second);
		tl = l;
		do
		{
			tl = (tl - 1 + n) % n;
			if (used[tl])
			{
				needBreak = true;
				break;
			}
			if (v[tl].second == v[l].second)
				l = tl;
		} while (v[tl].second == v[l].second);

		if (tr == l || needBreak)
			break;
		if (v[tl].second >= v[tr].second)
			r = tr;
		else
		{
			l = tl;
			r = tr;
		}
	}

	llg dtans = 0, mn_ans = 0;

	forit(it, ins_l)
	{
		dtans = check(it->first, k);
		mn_ans = max(dtans, mn_ans);
	}

	forit(it, outs_l)
	{
		if (it->first > mn_x)
			break;
		dtans = check2(it->first, k);
		mn_ans = max(dtans, mn_ans);
	}

	cout << ans - mn_ans << endl;

	//---------------------------------------------------------------------
	return 0;
}
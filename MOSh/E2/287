#include <bits/stdc++.h>

using namespace std;
typedef long long ll;

struct point{
    int x, y;
    point(int x_ = 0, int y_ = 0){
        x = x_;
        y = y_;
    }
};

vector<point> A;
vector<vector<int> > H;
int n, k;

int main(){
    ifstream IN("monument.in");
    ofstream OUT("monument.out");
    IN >> n >> k;
    A.resize(n + 1);
    int mx = 0;
    int mn = 0;
    for(int i = 0; i < n; ++i){
        IN >> A[i].x >> A[i].y;
        if(A[i].y > A[mx].y or(A[i].y == A[mx].y and A[i].x < A[mx].x)) mx = i;
        if(A[i].y < A[mn].y or(A[i].y == A[mn].y and A[i].x < A[mn].x)) mn = i;
    }
    A[n] = A[0];
    H.resize(1001);
    for(int i = 0; i < n; ++i){
        if(A[i].x == A[i + 1].x){
            for(int j = A[i].y; j < A[i + 1].y; ++j){
                H[j].push_back(A[i].x);
            }
            for(int j = A[i + 1].y; j < A[i].y; ++j){
                H[j].push_back(A[i].x);
            }
        }
    }
    for(int i = 0; i < 1001; ++i){
        sort(H[i].begin(), H[i].end());
    }
    int mn1 = 1000000000;
    for(int s = 0; s < k; ++s){
        int ans = 0;
        for(int i = A[mx].y - 1; i >= A[mn].y; --i){
            for(int j = 0; j < H[i].size(); j += 2){
                int dif = H[i][j + 1] - H[i][j];
                int shift1 = (A[mx].x - H[i][j] + A[mx].y - i + s) % k;
                int shift2 = (A[mx].x - H[i][j + 1] + A[mx].y - i - 1 + s) % k;
                dif += shift1;
                dif += (k - shift2) % k;
                int res = dif / k;
                ans += res;
            }
        }
        mn1 = min(mn1, ans);
    }
    OUT << mn1;
    return 0;
}

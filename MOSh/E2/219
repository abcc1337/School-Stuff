#include <fstream>
#include <vector>

using namespace std;

#define NAME "submarine"

#ifdef DEBUG
#include <iostream>
#define PRINT(x) cerr << #x << ": " << x << '\n';
#define DELIM cerr << "======================\n";
#else
#define PRINT(x)
#define DELIM
#endif // DEBUG

ifstream in(NAME ".in");
ofstream out(NAME ".out");

template <class A, class B>
ostream &operator <<(ostream &o, const pair<A, B> &p)
{
    return o << '(' << p.first << ';' << p.second << ')';
}

template <class T>
ostream &operator <<(ostream &o, const vector<T> &v)
{
    o << '[';
    if(!v.empty())
    {
        o << v.front();
        for(int i = 1; i < v.size(); i++)
        {
            o << ';' << v[i];
        }
    }
    return o << ']';
}

const int INF = 1e9 + 7;

int main()
{
    int k;
    in >> k;
    vector<int> codes(k);
    for(int i = 0; i < k; i++)
    {
        in >> codes[i];
    }

    int h, w;
    in >> h >> w;

    vector<vector<int>> photo(w, vector<int>(h));

    for(int y = 0; y < h; y++)
    {
        for(int x = 0; x < w; x++)
        {
            char ch;
            in >> ch;
            photo[x][y] = codes[ch - 'a'];
        }
    }

    vector<vector<int>> best_sum_up   (w, vector<int>(h));
    vector<vector<int>> best_sum_down (w, vector<int>(h));
    vector<vector<int>> best_sum_left (w, vector<int>(h));
    vector<vector<int>> best_sum_right(w, vector<int>(h));

    for(int x = 0; x < w; x++)
    {
        for(int y = 0; y < h; y++)
        {
            int sum = 0;
            int best_sum = sum;
            best_sum_left[x][y] = best_sum;
            for(int x1 = x; x1 >= 0; x1--)
            {
                sum += photo[x1][y];
                if(sum > best_sum)
                {
                    best_sum = sum;
                    best_sum_left[x][y] = best_sum;
                }
            }

            sum = 0;
            best_sum = sum;
            best_sum_right[x][y] = best_sum;
            for(int x1 = x; x1 < w; x1++)
            {
                sum += photo[x1][y];
                if(sum > best_sum)
                {
                    best_sum = sum;
                    best_sum_right[x][y] = best_sum;
                }
            }

            sum = 0;
            best_sum = sum;
            best_sum_down[x][y] = best_sum;
            for(int y1 = y; y1 < h; y1++)
            {
                sum += photo[x][y1];
                if(sum > best_sum)
                {
                    best_sum = sum;
                    best_sum_down[x][y] = best_sum;
                }
            }

            sum = 0;
            best_sum = sum;
            best_sum_up[x][y] = best_sum;
            for(int y1 = y; y1 >= 0; y1--)
            {
                sum += photo[x][y1];
                if(sum > best_sum)
                {
                    best_sum = sum;
                    best_sum_up[x][y] = best_sum;
                }
            }
        }
    }

    int max_sum = -INF;

    for(int x3 = 0; x3 < w - 1; x3++)
    {
        for(int y1 = 0; y1 < h; y1++)
        {
            int base_sum = photo[x3][y1];
            for(int x4 = x3 + 1; x4 < w; x4++)
            {
                base_sum += photo[x4][y1];
                int sum = base_sum;
                if(y1 > 0)
                {
                    sum += best_sum_up[x3][y1 - 1];
                    sum += best_sum_up[x4][y1 - 1];
                }
                if(y1 < h - 1)
                {
                    sum += best_sum_down[x4][y1 + 1];
                }
                if(x3 > 0)
                {
                    sum += best_sum_left[x3 - 1][y1];
                }
                if(x4 < w - 1)
                {
                    sum += best_sum_right[x4 + 1][y1];
                }

                max_sum = max(sum, max_sum);
            }
        }
    }

    PRINT(max_sum);
    out << max_sum;

    in.close();
    out.close();
    return 0;
}

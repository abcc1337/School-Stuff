#include <bits/stdc++.h>
using namespace std;

struct Tri
{
    int n, x, y;
};

vector<vector<int>> g;
vector<Tri> reb;
vector<int> used;

void dfs(int v)
{
    used[v] = 1;
    for(int i=0; i<g[v].size(); i++)
        if(!used[g[v][i]])
            dfs(g[v][i]);
}

int main()
{
    //freopen("input.txt", "r", stdin);
    freopen("repair.in", "r", stdin);
    freopen("repair.out", "w", stdout);
    int a, b, n, q;
    cin >> a >> b >> n >> q;
    reb.resize(n-1);

    for(int i=0; i<n-1; i++)
    {
        string s;
        int x, y;
        cin >> s >> x >> y;
        reb[i].n = (s=="v" ? 1 : 0);
        reb[i].x = x;
        reb[i].y = y;
    }

    map<pair<int,int>, int> aa;
    vector<int> pust;

    for(int i=0; i<q; i++)
    {
        int x1, y1, x2, y2;
        cin >> x1 >> y1 >> x2 >> y2;
        aa.clear();
        int k = 1;
        g.resize(1);

        for(int i=0; i<n-1; i++)
        {
            int v, u;
            if (reb[i].x >= x1 && reb[i].x <= x2 && reb[i].y>=y1 && reb[i].y<=y2)
            {
                if (aa.count(make_pair(reb[i].x, reb[i].y)))
                    v = aa[make_pair(reb[i].x, reb[i].y)];
                else
                      v = aa[make_pair(reb[i].x, reb[i].y)] = k++;
            }
            else
                v=-1;

            if (reb[i].n==1)
            {
                if (reb[i].x >= x1 && reb[i].x <= x2 && reb[i].y+1>=y1 && reb[i].y+1<=y2)
                {
                    if (aa.count(make_pair(reb[i].x, reb[i].y+1)))
                        u = aa[make_pair(reb[i].x, reb[i].y+1)];
                    else
                          u = aa[make_pair(reb[i].x, reb[i].y+1)] = k++;
                }
                else
                    u=-1;
            }
            else
            {
                if (reb[i].x+1 >= x1 && reb[i].x+1 <= x2 && reb[i].y>=y1 && reb[i].y<=y2)
                {
                    if (aa.count(make_pair(reb[i].x+1, reb[i].y)))
                        u = aa[make_pair(reb[i].x+1, reb[i].y)];
                    else
                          u = aa[make_pair(reb[i].x+1, reb[i].y)] = k++;
                }
                else
                    u=-1;
            }

            if (g.size()==v)
                g.push_back(pust);
            if (g.size()==u)
                g.push_back(pust);

            if (v!=-1 && u!=-1)
            {
                g[v].push_back(u);
                g[u].push_back(v);
            }
        }

        int ot = 0;
        used.assign(g.size(), 0);

        for(int i=1; i<g.size(); i++)
            if (!used[i])
                dfs(i), ot++;
        cout << ot << endl;
    }

    return 0;
}

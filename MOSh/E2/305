#include <bits/stdc++.h>

using namespace std;

const int MAXN = 3005;

int a[MAXN];

map<pair<int, int>, int> q;

int _ask(int l, int r) {
    if (l == r)
        return 1;
    if (q.find({l, r}) != q.end())
        return q[{l, r}];
    int res;
    cout << "? " << l << ' ' << r << endl;
    cin >> res;
    q[{l, r}] = res;
    return res;
}

int main() {
    int n, k;
    cin >> n;
    k = _ask(1, n);
    int cur = 1, pos = 1;
    vector<pair<int, int> > v;
    v.reserve(n);
    while (pos <= n) {
        int mem = pos;
        a[pos] = cur;
        while (pos + 1 <= n && _ask(mem, pos + 1) == 1) {
            ++pos;
            a[pos] = a[pos - 1];
        }
        v.push_back({mem, pos});
        ++pos;
        ++cur;
    }
    vector<int> color(v.size()), mark(k + 1);
    mark[1] = mark[2] = 1;
    for (int i = 2; i < v.size(); ++i) {
        bool find_color = false;
        for (int j = i - 1; j >= 0; --j) {
            int res1 = _ask(v[j].first, v[i].first - 1);
            int res2 = _ask(v[j].first, v[i].second);
            if (res1 == res2) {
                for (pos = v[i].first; pos <= v[i].second; ++pos)
                    a[pos] = a[v[j].first];
                mark[a[v[j].first]] = 1;
                find_color = true;
                break;
            }
        }
        if (!find_color) {
            for (int c = 1; c <= k; ++c) {
                if (!mark[c]) {
                    mark[c] = 1;
                    for (pos = v[i].first; pos <= v[i].second; ++pos)
                        a[pos] = c;
                }
            }
        }
    }
    cout << "Ready!" << endl;
    cout << k << endl;
    for (int i = 1; i <= n; ++i) {
        cout << a[i] << ' ';
    }
    cout << endl;

    return 0;
}

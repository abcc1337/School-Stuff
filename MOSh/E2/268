#define _CRT_SECURE_NO_WARNINGS

#include <iostream>
#include <cstdlib>
#include <cstdio>
#include <algorithm>
#include <cmath>
#include <vector>
#include <set>
#include <map>
#include <bitset>

using namespace std;

int solve();

#define TASK "twopaths"

typedef long long ll;

#define forn(i, n) for (int i = 0; i < n; i++)
#define fornn(i, q, n) for (int i = q; i < n; i++)
#define all(v) v.begin(), v.end()
#define mp make_pair

int main() {
#ifdef KAZAN
	freopen("input.txt", "r", stdin), freopen("output.txt", "w", stdout);
#else
	freopen(TASK".in", "r", stdin), freopen(TASK".out", "w", stdout);
#endif
	solve();
	return 0;
}

vector<vector<int> > e;

const int dd = 2e5 + 7;

const int maxH = 19;

int S[dd][3];
int up[maxH][1 << maxH];
int tin[dd], tout[dd], pr[dd], F[dd];
int tmm = 1;
int h[dd];

void operator delete(void *) {}

const int MAX_MEM = 3e8;
char MEM[MAX_MEM];
int mpos = 0;

void* operator new (size_t n){
	char* res = MEM + mpos;
	mpos += n;
	return (void*)res;
}

void dfs(int v, int pr) {
	tin[v] = tmm++;

	h[v] = (pr == -1 ? 0 : h[pr] + 1);

	if (v == 0) {
		forn(i, maxH)
			up[i][v] = 0;
	}
	else {
		up[0][v] = pr;

		fornn(i, 1, maxH) {
			up[i][v] = up[i - 1][up[i - 1][v]];
		}
	}

	for (int to : e[v]) {
		dfs(to, v);
	}

	tout[v] = tmm++;
}

bool par(int a, int b) {
	return tin[a] <= tin[b] && tout[b] <= tout[a];
}

int lca(int a, int b) {
	if (par(a, b))
		return a;
	if (par(b, a))
		return b;

	for (int i = maxH - 1; i >= 0; i--) {
		if (!par(up[i][a], b))
			a = up[i][a];
	}
	return up[0][a];
}

int check(int i, int j) {
	int t1 = lca(S[i][0], S[i][1]);
	int t2 = lca(S[j][0], S[j][1]);

	int ans = 0;
	if (t1 == t2) {
		forn(ii, 2) {
			forn(jj, 2) {
				int t = lca(S[i][ii], S[j][jj]);
				ans += max(h[t] - h[t1], 0);
			}
		}
	}
	else {
		forn(ii, 2) {
			forn(jj, 2) {
				if (par(F[j], F[i])) {
					int t = lca(S[i][ii], S[j][jj]);
					ans += max(h[t] - h[t1], 0);
				}
			}
		}


		swap(i, j);
		swap(t1, t2);

		forn(ii, 2) {
			forn(jj, 2) {
				if (par(F[j], F[i])) {
					int t = lca(S[i][ii], S[j][jj]);
					ans += max(h[t] - h[t1], 0);
				}
			}
		}
	}
	return ans;
}

int solve() {
	int n, k;
	scanf("%d %d", &n, &k);

	e.resize(n);

	forn(i, n - 1) {
		int t;
		scanf("%d", &t);

		pr[i + 1] = t - 1;
		e[t - 1].push_back(i + 1);
	}

	dfs(0, -1);

	forn(i, k) {
		int a, b;
		scanf("%d %d", &a, &b);

		a--, b--;

		S[i][0] = a;
		S[i][1] = b;

		int t = lca(a, b);
		F[i] = t;
	}

	int ia = 0, ib = 1;
	int mx = -1;

	forn(i, k) {
		forn(j, i) {
			if (check(i, j) > mx) {
				mx = check(i, j);
				ia = i;
				ib = j;
			}
		}
	}

	printf("%d\n", mx);
	printf("%d %d", ia + 1, ib + 1);

	return 0;
}
#include <iostream>
#include <vector>
#include <algorithm>
#include <cmath>
#include <math.h>
#include <cstring>
#include <string.h>
#include <stdio.h>
#include <cstdio>
using namespace std;
vector <pair<long long, int> > step;
vector <int> per(int a){
	vector <int> ans;
	while (a != 0){
		ans.push_back(a % 2);
		a = a / 2;
	}
	//reverse(ans.begin(), ans.end());
	return ans;
}
int ss(vector <int > a, int l, int r){
	int ans = 0;
	for (int i = l; i <= r; i++){
		ans += a[i] * (1 << i);
	}
	return ans;
}
int pod(vector <int > a, vector <int > b, vector <int > c){
	int ans = 0;
	for (int i = 0; i < min((int)a.size(), min((int)b.size(), (int)c.size())); i++){
		if (a[i] == b[i] && b[i] == c[i] && c[i] == a[i]){
			ans += 1;
		}
	}
	return ans;
}
int main(){
	freopen("grants.in", "rt", stdin);
	freopen("grants.out", "wt", stdout);
	int t;
	cin >> t;
	for (int i = 0; i <= 28; i++){
		step.push_back(make_pair((1 << i), i));
	}
	for (int i = 1; i <= t; i++){
		int n;
		cin >> n;
		if (n % 3 == 0){
			cout << n / 3 << ' ' << n / 3 << ' ' << n / 3;
			continue;
		}
		if (n <= 4){
			cout << 0 << ' ' << 0 << ' ' << n;
		}
		if (n % 2 == 1 && n % 3 == 1){
			cout << n / 3 << ' ' << n / 3 << ' ' << n / 3 + 1;
			continue;
		}
		if (n % 2 == 0 && n % 3 == 2){
			cout << n / 3 << ' ' << n / 3 +1 << ' ' << n / 3 + 1;
			continue;
		}
		if (n % 2 == 1){
			vector <pair<long long, int> >::iterator it = lower_bound(step.begin(), step.end(), make_pair((long long)n / 3, -1));
			int y = it->first;
			if (y % 3 == 1){
				int n1 = n - y;
				cout << n1 / 3 <<' '<< n1 / 3 <<' '<< n1 / 3 + y + 1;
				continue;
			}
			int n1 = n - y;
			cout << n1 / 3 << ' ' << n1 / 3 << ' ' << n1 / 3 + y;
		}

	}
}

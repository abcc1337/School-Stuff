#include <iostream>
#include <algorithm>

using namespace std;

pair <int, int> a[2000000];
int x[2000000];
int y[2000000];
bool color[2000000];

bool f(pair <int, int> p) {
	return p.second != -1;
}
int main() {
	freopen("monument.in", "r", stdin);
	freopen("monument.out", "w", stdout);

	int n, k;

	cin >> n >> k;

	for (int i = 0; i < n; i++) {
		cin >> x[i] >> y[i];
	}

	for (int i = 0; i < 1000113; i++) {
		a[i].first = 100000000;
		a[i].second = -1;
	}

	for (int i = 1; i < n; i ++) {
		if (x[i] == x[i - 1]) {
			for (int j = min(y[i], y[i - 1]); j < max(y[i], y[i - 1]); j++) {
				a[j].first = min(x[i], a[j].first);
				a[j].second = max(x[i], a[j].second);
			}
		}
	}

	if (x[0] == x[n - 1]) {
		for (int j = min(y[0], y[n - 1]); j < max(y[0], y[n - 1]); j++) {
			a[j].first = min(x[0], a[j].first);
			a[j].second = max(x[0], a[j].second);
		}
	}

	int out = 0, max_z = -1;

	for (int i = -k; i <= k; i++) {
		if (color[i] == 0 && f(a[i])) {
			int sum = 0;
			for (int j = 0; j < 1000113; j++) {
				if (f(a[j])) {
					int v1 = (a[j].second - a[j].first) / k + ((a[j].second - a[j].first) % k != 0);
					int lv = (a[j].first - j + i) / k;
					if (lv * k + j - i > a[j].first) {
						lv--;
					}
					int v2 = (a[j].second - (lv * k + j - i)) / k + ((a[j].second - (lv * k + j - i)) % k != 0);
					if (v1 == v2) {
						sum++;
					}
				}
			}
			if (sum > max_z) {
				max_z = sum;
				out = i;
			}
		}
	}

	int outout = 0;
	for (int i = 0; i < 1000113; i++) {
		if (f(a[i])) {
			int v1 = (a[i].second - a[i].first) / k + ((a[i].second - a[i].first) % k != 0);
			int lv = (a[i].first - i + out) / k;
			if (lv * k + i - out > a[i].first) {
				lv--;
			}
			int v2 = (a[i].second - (lv * k + i - out)) / k + ((a[i].second - (lv * k + i - out)) % k != 0);
			outout += v2;
		}
	}

	cout << outout;
	return 0;
}
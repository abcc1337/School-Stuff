fin = open('twopaths.in', 'r')
fout = open('twopaths.out', 'w')
input = fin.readline

def dfs(v, t, path):
    global a, b, path1, path2, was
    if v == b:
        if t == 1: path1 = path.copy()
        if t == 2: path2 = path.copy()
        return
    was[v] = 1
    for u in g[v]:
        if not was[u]:
            ed = min(u, v), max(u, v)
            dfs(u, t, path | {ed})

def f(i, j):
    global a, b, path1, path2, was
    path1, path2 = set(), set()
    a, b = c[i]
    was = [0] * (n + 1)
    dfs(a, 1, set())
    a, b = c[j]
    was = [0] * (n + 1)
    dfs(a, 2, set())
    res = len(path1 & path2)
    return res

read = lambda: map(int, input().split())
n, k = read()
p = [0] + list(read())
c = [tuple(read()) for i in range(k)]
g = [list() for i in range(n + 1)]
for i in range(1, n + 1):
    if i != 1: g[i].append(p[i - 1])
    g[p[i - 1]].append(i)
Max = -1
ans = -1, -1
a, b = -1, -1
was = [0] * (n + 1)
path1, path2 = set(), set()
for i in range(k):
    for j in range(i + 1, k):
        cur = f(i, j)
        if cur > Max:
            Max = cur
            ans = i + 1, j + 1
print(Max, file = fout)
print(*ans, file = fout)

fin.close()
fout.close()
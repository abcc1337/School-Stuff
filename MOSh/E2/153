#define MY_TASK 'C'

#ifdef LOCAL
#include "task_select.cpp"
#else
#define TASK MY_TASK
#endif // LOCAL

#if MY_TASK == TASK

#define _CRT_SECURE_NO_WARNINGS

#include<cstdio>
#include<cstring>
#include<cmath>
#include<cassert>
#include<cstdlib>
#include<ctime>
#include<iostream>
#include<fstream>
#include<algorithm>
#include<string>
#include<vector>
#include<set>
#include<map>
#include<queue>
#include<stack>
#include<list>
#include<forward_list>
#include<unordered_map>
#include<unordered_set>
#include<functional>
#include<initializer_list>

typedef long long ll;
typedef long double ld;
#define mp make_pair
#define all(a) (a).begin(), (a).end()

#ifdef _DEBUG
#define debug printf
#define reader scanf
#else
#define debug ;
#define reader ;
#endif // _DEBUG

void wait() {
#ifdef LOCAL
	freopen("CON", "r", stdin);
	system("pause");
#endif
}

using namespace std;

const int MAXN = 1e6;
const int INF = 2e9;
const ll LONG_INF = 4e18;

int a[MAXN];
int best[MAXN];
int n, q;

int do_calc() {
	int b;
	bool f = false;
	for (int i = 0; i < n; i++) {
		if (a[i] && !f) {
			b = i;
			f = true;
		}
		if (!a[i] && f) {
			best[b] = max(i - 1, best[b]);
			f = false;
		}
	}
	if (f) {
		best[b] = max(n - 1, best[b]);
		f = false;
	}

	ll ans = 0;
	int local_best = -1;
	for (int i = 0; i < n; i++) {
		local_best = max(local_best, best[i]);
		ans += max(0, local_best - i + 1);
	}

	return ans;
}

int main() {
#ifdef LOCAL
	freopen("input.txt", "r", stdin);
	//freopen("output.txt", "w", stdout);
#else
	freopen("lamps.in", "r", stdin);
	freopen("lamps.out", "w", stdout);
#endif

	cin >> n >> q;
	for (int i = 0; i < n; i++) {
		char c;
		cin >> c;
		a[i] = c == '1';
		best[i] = -1;
	}

	cout << do_calc() << '\n';
	for (int shit = 0; shit < q; shit++) {
		int l, r, c;
		cin >> l >> r >> c;
		l--, r--;
		for (int i = l; i <= r; i++) {
			a[i] = c;
		}
		cout << do_calc() << '\n';
	}

	wait();
	return 0;
}

#endif


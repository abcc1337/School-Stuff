#include <iostream>
#include <stdio.h>
#include <set>

using namespace std;
int a[1000][1000];
int b[1000][1000];
int help[1000000];
struct tri{
    int s;
    int f;
    int sob;
};
int nog[1000];
int nov[1000];
int neg[1000];
int nev[1000];
int main() {
    freopen("video.in", "r", stdin);
    freopen("video.out", "w", stdout);
    int n, m;
    cin >> n >> m;
    char c;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            cin >> c;
            a[i][j] = c - '0';
        }
    }
    if (n == 2 && m != 2) {
        int cnt = 0;
        for (int j = 0; j < m - 1; j++) {
            if (a[0][j] == a[1][j] && a[0][j] == a[1][j + 1] && a[0][j] == a[0][j + 1]) {
                cnt++;
            }
        }
        cout << a[1][1] << endl;
        if (a[0][0] == a[1][0] && a[0][0] == a[0][m - 1] && a[0][0] == a[1][m - 1]) {
            cnt++;
            //cout << "X";
        }
        cout << min(cnt, m - 1);
        return 0;
    } else if (n != 2 && m == 2) {
        int cnt = 0;
        for (int i = 0; i < n; i++) {
            if (a[i][0] == a[i + 1][0] && a[i][0] == a[i][1] && a[i][0] == a[i + 1][1]) {
                cnt++;
            }
        }
        if (a[0][0] == a[n - 1][0] && a[0][0] == a[0][1] && a[0][0] == a[n - 1][1]) {
            cnt++;
        }
        cout << min(cnt, n - 1);
        return 0;
    } else if (n == 2 && m == 2) {
        if (a[0][1] == a[0][0] && a[0][0] == a[1][1] && a[0][0] == a[1][0]) {
            cout << 1;
        } else {
            cout << 0;
        }
        return 0;
    }
    int cnt = n * m;
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < m; j++) {
            if (i < n - 1 && j < m - 1) {
                if (a[i + 1][j] == a[i][j] && a[i + 1][j + 1] == a[i][j] && a[i][j + 1] == a[i][j]) {
                    nog[n - 1 - i]++;
                    nov[m - 1 - j]++;
                    b[i][j]++;
                   // cout << i<< ' ' << j << endl;
                } else {
                    cnt--;
                    neg[n - 1 - i]++;
                    nev[m - 1 - j]++;
                }
            } else if (i < n - 1 && j == m - 1) {
                if (a[i + 1][j] == a[i][j] && a[i][0] == a[i][j] && a[i + 1][0] == a[i][j]) {
                    nog[n - 1 - i]++;
                    nov[m - 1 - j]++;
                    b[i][j]++;
                   // cout << i << ' ' << j << endl;
                } else {
                    cnt--;
                    neg[n - 1 - i]++;
                    nev[m - 1 - j]++;
                }
            } else if (i == n - 1 && j < m - 1) {
                if (a[0][j] == a[i][j] && a[i][j + 1] == a[i][j] && a[0][j + 1] == a[i][j]) {
                    nog[n - 1 - i]++;
                    nov[m - 1 - j]++;
                    b[i][j]++;
                   // cout << i<< ' ' << j << endl;
                } else {
                    cnt--;
                    neg[n - 1 - i]++;
                    nev[m - 1 - j]++;
                }
            } else if (i == n - 1 && j == m - 1) {
                if (a[0][j] == a[i][j] && a[i][0] == a[i][j] && a[0][0] == a[i][j]){
                    nog[n - 1 - i]++;
                    nov[m - 1 - j]++;
                    b[i][j]++;
                   // cout << i<< ' ' << j << endl;
                } else {
                    cnt--;
                    neg[n - 1 - i]++;
                    nev[m - 1 - j]++;
                }
            }
        }
    }
    int ans = 0;
    //cout << cnt << ' ';
    for (int i = 0; i < n; i++) {
        //cout << nov[i] << endl;
        for (int j = 0; j < m; j++) {
            int cnt1 = cnt - nog[i] - nov[j] + b[n - 1 - i][m - 1 - j];
            //cout << nog[i] << ' ' << nov[j] << ' ' << b[i][j] << endl;
            ans = max(ans, cnt1);
        }
    }
    cout << ans;
}

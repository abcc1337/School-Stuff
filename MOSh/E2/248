
#include <fstream>
#include <vector>
#include <utility>

using namespace std;
ifstream cin("grants.in");
ofstream cout("grants.out");

vector <vector <long long> > table;
int n;
long long x;
const long long INF = 1e+18;

vector <int> bin;
vector <long long> po;

long long best = -1;
long long tri[3];

void rec(int k) {
    if (k >= (int)bin.size()) {
        long long a = 0;
        long long h = x;
        for (int i = 0; i < (int)bin.size(); i++) {
            if (bin[i] == 1) {
                a += po[i];
                h -= po[i] * 3;
            }
            if (h < 0) {
                return;
            }
        }
        string s = "";
        while (h > 0) {
            int r = h % 2;
            s = (char)(r + '0') + s;
            h = h >> 1;
        }
        for (int i = 0; i < (int)s.length() / 2; i++) {
            swap(s[i], s[s.length() - i - 1]);
        }

        bool f = true;
        long long abc[3];
        abc[0] = abc[1] = abc[2] = a;
        while (bin.size() < s.size()) { bin.push_back(0); }
        while (s.size() < bin.size()) { s = s + '0'; }
        /*for (int j = 0; j < (int)bin.size(); j++) {
            cout << bin[j];
        }
        cout << " " << s << " " << a << '\n';*/
        for (int i = 0; i < min(s.length(), bin.size()); i++) {
            if (i == 0) {
                if (s[i] == '1' && bin[i] == 1) {
                    f = false;
                } else if (s[i] == '1')
                    abc[0] += po[i];
            } else {
                if (s[i] == '1' && bin[i] == 1) {
                    if (!(bin[i - 1] == 0 && s[i - 1] == '0')) {
                        f = false;
                        break;
                    } else {
                        abc[0] = abc[1] = abc[1] + po[i - 1];
                    }
                } else if (s[i] == '1')
                        abc[0] += po[i];
            }
        }
        if (f && best < a) {
            best = a;
            tri[0] = abc[0];
            tri[1] = abc[1];
            tri[2] = abc[2];
        }
        return;
    }
    for (int i = 0; i < 2; i++) {
        bin[k] = i;
        rec(k + 1);
    }
}

int main()
{
    po.resize(61);
    po[0] = 1;
    for (int k = 1; k < 61; k++) {
        po[k] = po[k - 1] * 2;
    }

    cin >> n;
    for (int k = 0; k < n; k++) {
        cin >> x;

        int l = 0, r = 61;
        while (r - l > 1) {
            int m = (l + r) / 2;
            if (po[m] <= x) {
                l = m;
            } else {
                r = m;
            }
        }
        bin.resize(l);

        best = -1;
        rec(0);
        bin.clear();
        cout << tri[0] << " " << tri[1] << " " << tri[2] << '\n';
    }
    return 0;
}

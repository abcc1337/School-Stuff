program zad_8;

{$APPTYPE CONSOLE}

uses
  SysUtils,
  Math;

var
   d, head, next, dest, rast, mark, color :array[1..31000] of integer;
   n, i, j, u, free, x, y, z, ss, w, s, kol, kolc :integer;

procedure add(v, u, x :integer);
begin
    next[free] := head[v];
    head[v] := free;
    dest[free] := u;
    rast[free] := x;
    inc(free);
end;

procedure dfs(v, tt :integer);
var
    u, t :integer;
begin
    t := max(d[v], tt);
    mark[v] := i;
    inc(ss);
    u := head[v];
    while (u <> 0) do
    begin
        if (mark[dest[u]] <> i) and (rast[u] <= t) then
            dfs(dest[u], t - rast[u]);
        u := next[u];
    end;
end;

procedure dfs1(v, tt :integer);
var
    u, t :integer;
begin
    t := max(d[v], tt);
    color[v] := 1;
    inc(kolc);
    u := head[v];
    while (u <> 0) do
    begin
        if (color[dest[u]] = 0) and (rast[u] <= t) then
            dfs1(dest[u], t - rast[u]);
        u := next[u];
    end;
end;

begin
    reset(input, 'alarm.in');
    rewrite(output, 'alarm.out');
    readln(n);
    for i := 1 to n do
        read(d[i]);
    free := 1;
    for i := 1 to n - 1 do
    begin
        readln(x, y, z);
        add(x, y, z);
        add(y, x, z);
    end;
    kol := 0;
    kolc := 0;
    while (kolc < n) do
    begin
        s := 0;
        w := 0;
        for i := 1 to n do
            mark[i] := 0;
        for i := 1 to n do
            if (color[i] = 0) then
            begin
                ss := 0;
                dfs(i, d[i]);
                if (ss > s) then
                begin
                    s := ss;
                    w := i;
                end;
            end;
        if (w = 0) then
            break;
        inc(kol);
        dfs1(w, d[w]);
    end;
    writeln(kol);
end.

10
1 2 2 2 6 3 4 5 4 3
1 2 5
2 3 1
2 4 5
4 5 2
4 6 4
4 7 3
1 8 1
8 9 5
8 10 4

